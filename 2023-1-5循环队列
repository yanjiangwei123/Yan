class MyCircularQueue {
    //添加属性
    public int[] array; //用数组来存取队列
    public int tail;    //定义尾指针
    public int head;    //定义头指针
    public int size;    //队列中值的个数

    //构造函数初始化队列长度
    public MyCircularQueue(int k) { 
        size=0;
        head=0; //头指针和尾指针均在数组索引为0的位置
        tail=0;
        //值得注意的地方：形参k是队列的长度(可存入值的个数)，而在此定义的数组的长度为k+1
        //因为在循环队列中需要预留一个位置来判队满，故数组长度比队列长度多一个
        array=new int[k+1]; 
 
    }

        /** 检查队列是否为空 */
    public boolean isEmpty() {
        return head == tail; //当两指针在同一位置时，队列为空
    }
    
    /** 检查队列是否已满 */
    public boolean isFull() {
        return ((tail + 1) % array.length) == head; 
        //在循环队列中会留取一个位置来判满，即 尾指针应该在头指针的前面一个位置，故基本条件是：tail + 1==head
        //而循环队列里面，会有头指针在0的位置，而尾指针在size-1的位置，所以(tail + 1) % size ==head 能满足所有情况
    }

    /** 插入元素应该在队列末尾处插入 */
    public boolean enQueue(int value) {
        if(isFull()){return false;}  //判满

        array[tail]=value;           //先在初尾指针位置赋值
        tail=(tail+1)%array.length;  //再将尾指针先后移动(循环队列需要在最大处+1后置0，故：做了取余处理)
        size++;                 
        return true;
    }

    /** 删除元素应该在队首处删除(取出) */
    public boolean deQueue() {
        if(isEmpty()){return false;}
        //int get=array[head];  
        head=(head+1)%array.length;  //同理，头指针也需要先前移动，并做取余处理
        size--;
        return true;
    }
    
    public int Front() {
        if(isEmpty()){return -1;}
        return array[head];
    }
    
    public int Rear() {
        if(isEmpty()){return -1;}
        if (tail!=0)
            {return array[tail-1];}
        else
            {return array[array.length-1];}
    }
    


}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
